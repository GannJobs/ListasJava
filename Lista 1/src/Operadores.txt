2.
Em Java, a precedência de operadores determina a ordem em que as operações aritméticas são executadas em uma expressão. 
Aqui está a ordem:

Operadores unários: ++, --, +, -, !, ~
Multiplicação, divisão e resto da divisão: *, /, %
Adição e subtração: +, -
Deslocamento de bits: <<, >>, >>>
Relacionais: <, <=, >, >=, instanceof
Igualdade: ==, !=
Bitwise AND: &
Bitwise XOR: ^
Bitwise OR: |
Operadores lógicos AND: &&
Operadores lógicos OR: ||
Condicional ternário: ?:
Atribuição: =, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=

Por exemplo, na expressão "a + b * c", a multiplicação é realizada antes da adição porque o operador de multiplicação tem 
uma precedência maior que o operador de adição, para resolver isso usamos os parênteses.
Qualquer expressão dentro de parênteses é avaliada primeiro, independentemente da precedência dos operadores. 
Por exemplo, na expressão "(a + b) * c", a adição é realizada primeiro porque os parênteses têm uma precedência maior que 
o operador de multiplicação.

---------------------------------------------------------------------------------------------------------------------------

3.
O operador condicional ternário em Java é representado por "?:" e é usado para avaliar uma expressão com base em uma condição. 
Ele é chamado de operador ternário porque ele trabalha com três operandos: a condição a ser avaliada, a expressão a ser executada 
se a condição for verdadeira e a expressão a ser executada se a condição for falsa.

Sintaxe: variavel = (condicao) ? expressao1 : expressao2;
variavel: a variável que receberá o valor avaliado pela condição.
condicao: a condição a ser avaliada. Se for verdadeira, a expressão1 será executada, caso contrário a expressão2 será executada.
expressao1: a expressão a ser executada se a condição for verdadeira.
expressao2: a expressão a ser executada se a condição for falsa.

O operador condicional ternário em Java é útil para simplificar a escrita de código e torná-lo mais legível,
é importante lembrar que o operador condicional ternário só deve ser usado em expressões simples. 
Para expressões mais complexas, é melhor usar o comando if-else convencional.
OBS: É importante que as expressões expressao1 e expressao2 tenham o mesmo tipo de dados para evitar erros de compilação.